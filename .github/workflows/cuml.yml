name: Build libcuml

on:
  workflow_dispatch:

jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
        cuda: ['11.4.2', '11.2.1']
        cuml: ['21.08', '21.10', '21.12']

    runs-on: self-hosted
    container:
      image: nvidia/cuda:${{ matrix.cuda }}-devel-ubuntu18.04
      options: --gpus all --shm-size=8192m

    env:
      CUML_HOME: /dev/shm/cuml
      DEBIAN_FRONTEND: 'noninteractive'
      BUILD_ARTIFACT_NAME: libcuml-${{ matrix.cuml }}-cuda${{ matrix.cuda }}

    defaults:
      run:
        shell: bash -l {0}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: apt-get update -y
      - run:
          apt-get install -y curl jq
      - name: Check if a release with the same name already exists
        id: check-release-exists
        run: |
          EXISTING_RELEASES=$(curl -L https://api.github.com/repos/mlverse/libcuml-builds/releases | jq '.[].tag_name' | paste -sd ' ')
          CURRENT_RELEASE=v${{ matrix.cuml }}-cuda${{ matrix.cuda }}
          echo "Name of the current release: '${CURRENT_RELEASE}'"

          echo '::set-output name=exists::false'
          for release in $EXISTING_RELEASES; do
            if [[ "${release}" == '"'"${CURRENT_RELEASE}"'"' ]]; then
              echo -e "\n\n"\
                "A release with the same name already exists!\n"\
                "\n"\
                "If necessary, you can go to\n"\
                "https://github.com/mlverse/libcuml-builds/releases/tag/${CURRENT_RELEASE}\n"\
                "to manually delete the existing release first, and then\n"\
                "re-launch this GitHub action to create another release with\n"\
                "the same name as replacement.\n"
              echo '::set-output name=exists::true'
              break
            fi
          done
        shell: bash

      - run: |
          apt-get install -y sudo software-properties-common dialog apt-utils git zip build-essential wget libblas-dev liblapack-dev
        if: steps.check-release-exists.outputs.exists == 'false'

      - uses: actions/checkout@v2
        if: steps.check-release-exists.outputs.exists == 'false'

      - name: Clone cuml repository
        run: |
          git clone --single-branch --branch branch-${{ matrix.cuml }} https://github.com/rapidsai/cuml.git $CUML_HOME
          cd "${CUML_HOME}"
          git submodule update --init --remote --recursive
        if: steps.check-release-exists.outputs.exists == 'false'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.21.x'
        if: steps.check-release-exists.outputs.exists == 'false'

      - name: Build libcuml
        env:
          CFLAGS: "-Wno-sign-compare"
          CXXFLAGS: "-Wno-sign-compare"
        run: |
          find "${CUML_HOME}/cpp" -type f -name ConfigureCUDA\.cmake -exec sed -E -i -e s/'-Werror([,\ ]|=[A-Za-z\-]+)?'/''/g '{}' \;
          mkdir -p "${CUML_HOME}/cpp/build"
          cd "${CUML_HOME}/cpp/build"
          cmake .. \
            -DCMAKE_CUDA_ARCHITECTURES=ALL \
            -DSINGLEGPU=ON \
            -DBUILD_CUML_TESTS=OFF \
            -DBUILD_PRIMS_TESTS=OFF \
            -DBUILD_CUML_EXAMPLES=OFF \
            -DBUILD_CUML_BENCH=OFF \
            -DBUILD_CUML_PRIMS_BENCH=OFF
          cmake --build . --parallel 8
        if: steps.check-release-exists.outputs.exists == 'false'

      - name: Package libcuml and dependencies
        run: |
          cd "${CUML_HOME}/cpp/build"
          if [[ ${{ matrix.cuml }} == '21.08' ]]; then
            cat ./CPackConfig.cmake
            cpack --config ./CPackConfig.cmake -G ZIP -D CPACK_PACKAGE_FILE_NAME=${BUILD_ARTIFACT_NAME} -B ../../..
          else
            # spdlog headers are not exported by cuML builds in version 21.10
            # or above, but those headers are needed by {cuda.ml}
            #
            # The easiest workaround here is to simply build and install another
            # copy of spdlog separately and bundle it together with the rest of
            # the libcuml build artifacts.
            CUML_INSTALL_PREFIX=/dev/shm/${{ env.BUILD_ARTIFACT_NAME }}
            mkdir -pv "${CUML_INSTALL_PREFIX}"
            cmake -DCMAKE_INSTALL_PREFIX="${CUML_INSTALL_PREFIX}" -P cmake_install.cmake

            # Build and install spdlog separately
            cd /dev/shm
            curl -L \
              https://raw.githubusercontent.com/rapidsai/rapids-cmake/branch-${{ matrix.cuml }}/rapids-cmake/cpm/versions.json | \
              jq '.["packages"]["spdlog"]' | \
              tee cuml-spdlog-spec.json
            SPDLOG_VERSION="$(jq '.["version"]' cuml-spdlog-spec.json | tr -d '"')"
            SPDLOG_GIT_URL="$(jq '.["git_url"]' cuml-spdlog-spec.json | tr -d '"')"
            git clone -b "v${SPDLOG_VERSION}" --single-branch "${SPDLOG_GIT_URL}"
            mkdir spdlog/build
            cd spdlog/build
            cmake ..
            cmake --build . --parallel 8
            cmake -DCMAKE_INSTALL_PREFIX="${CUML_INSTALL_PREFIX}" -P cmake_install.cmake
            cd /dev/shm
            zip -r ${{ env.BUILD_ARTIFACT_NAME }}.zip ${{ env.BUILD_ARTIFACT_NAME }}
          fi
        shell: bash
        if: steps.check-release-exists.outputs.exists == 'false'

      - name: Release
        if: steps.check-release-exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          files: /dev/shm/${{ env.BUILD_ARTIFACT_NAME }}.zip
          name: v${{ matrix.cuml }}-cuda${{ matrix.cuda }}
          tag_name: v${{ matrix.cuml }}-cuda${{ matrix.cuda }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
